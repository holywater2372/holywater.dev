---
const imported = import.meta.glob(
  '../content/gallery/*.{jpg,jpeg,png,webp,avif,gif}',
  {
    eager: true,
    query: '?url',
    import: 'default',
  },
) as Record<string, string>

const entries = Object.entries(imported)
const images = entries.map(([, url]) => url)
const randomIndex =
  images.length > 0 ? Math.floor(Math.random() * images.length) : -1
const randomImage = randomIndex >= 0 ? images[randomIndex] : undefined
const randomKey = randomIndex >= 0 ? entries[randomIndex][0] : ''
const alt = randomKey
  ? (randomKey
      .split('/')
      .pop()
      ?.replace(/\.[^/.]+$/, '')
      ?.replace(/[-_]+/g, ' ') ?? '')
  : ''
---

<div class="relative h-48 overflow-hidden rounded-lg border md:h-96">
  {
    randomImage && (
      /* Uncomment to enable click redirect to /gallery */
      /* <a href="/gallery" class="block h-full w-full cursor-pointer"> */
        <img
          id="gallery-image"
          src={randomImage}
          alt={alt}
          loading="lazy"
          decoding="async"
          class="block h-full w-full object-cover transition-opacity duration-500"
        />
      /* </a> */
    )
  }
</div>

<script is:inline define:vars={{ images, entries }}>
  function initGalleryRotation() {
    // Safe DOM query with type check
    const img = document.getElementById('gallery-image')
    if (!img || !(img instanceof HTMLImageElement)) {
      console.warn('Gallery image element not found or invalid')
      return
    }
    
    // Validate data arrays
    if (!Array.isArray(images) || !Array.isArray(entries)) {
      console.warn('Gallery data is invalid')
      return
    }
    
    if (images.length <= 1) {
      // Not enough images to rotate
      return
    }
    
    // Validate array lengths match
    if (images.length !== entries.length) {
      console.warn('Gallery data arrays length mismatch')
      return
    }
    
    let intervalId = null
    
    intervalId = setInterval(() => {
      // Re-check element still exists (in case of DOM changes)
      if (!document.getElementById('gallery-image')) {
        if (intervalId) clearInterval(intervalId)
        return
      }
      
      try {
        // Pick random image with bounds check
        const randomIndex = Math.floor(Math.random() * images.length)
        const newImage = images[randomIndex]
        const newKey = entries[randomIndex]?.[0]
        
        // Validate we have valid data
        if (!newImage || typeof newImage !== 'string') {
          console.warn('Invalid image URL')
          return
        }
        
        // Safe alt text extraction
        const newAlt = newKey && typeof newKey === 'string'
          ? (newKey
              .split('/')
              .pop()
              ?.replace(/\.[^/.]+$/, '')
              ?.replace(/[-_]+/g, ' ') ?? '')
          : ''
        
        // Preload the new image before transition
        const preloadImg = new Image()
        
        preloadImg.onerror = function() {
          console.warn('Failed to load gallery image:', newImage)
        }
        
        preloadImg.onload = function() {
          // Double-check img still exists before manipulating
          if (!img.parentNode) {
            if (intervalId) clearInterval(intervalId)
            return
          }
          
          // Only start fade after image is loaded
          img.style.opacity = '0'
          
          setTimeout(() => {
            // Triple-check before final update
            if (!img.parentNode) {
              if (intervalId) clearInterval(intervalId)
              return
            }
            
            // Update image safely
            img.src = newImage
            img.alt = newAlt
            
            // Fade in
            img.style.opacity = '1'
          }, 500) // Wait for fade out to complete
        }
        
        preloadImg.src = newImage
        
      } catch (error) {
        console.error('Error rotating gallery image:', error)
        if (intervalId) clearInterval(intervalId)
      }
    }, 10000) // Change every 10 seconds
  }
  
  // Run on load with proper timing
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initGalleryRotation)
  } else {
    initGalleryRotation()
  }
</script>