---
const imported = import.meta.glob(
  '../content/gallery/*.{jpg,jpeg,png,webp,avif,gif}',
  {
    eager: true,
    query: '?url',
    import: 'default',
  },
) as Record<string, string>

const entries = Object.entries(imported)
const images = entries.map(([, url]) => url)
// Use first image as placeholder, will be replaced immediately by client script
const placeholderImage = images.length > 0 ? images[0] : undefined
const placeholderKey = images.length > 0 ? entries[0][0] : ''
const placeholderAlt = placeholderKey
  ? (placeholderKey
      .split('/')
      .pop()
      ?.replace(/\.[^/.]+$/, '')
      ?.replace(/[-_]+/g, ' ') ?? '')
  : ''
---

<div class="relative h-48 overflow-hidden rounded-lg border md:h-96">
  {
    placeholderImage && (
      /* Uncomment to enable click redirect to /gallery */
      /* <a href="/gallery" class="block h-full w-full cursor-pointer"> */
        <img
          id="gallery-image"
          src={placeholderImage}
          alt={placeholderAlt}
          loading="lazy"
          decoding="async"
          class="block h-full w-full object-cover transition-opacity duration-500"
          style="opacity: 0;"
          data-gallery-placeholder="true"
        />
      /* </a> */
    )
  }
</div>

<script define:vars={{ images, entries }}>
  let galleryIntervalId = null;
  
  function initGalleryRotation() {
    // Clear any existing interval to prevent duplicates
    if (galleryIntervalId) {
      clearInterval(galleryIntervalId);
      galleryIntervalId = null;
    }
    // Safe DOM query with type check
    const img = document.getElementById('gallery-image')
    if (!img || !(img instanceof HTMLImageElement)) {
      console.warn('Gallery image element not found or invalid')
      return
    }
    
    // Validate data arrays
    if (!Array.isArray(images) || !Array.isArray(entries)) {
      console.warn('Gallery data is invalid')
      return
    }
    
    if (images.length === 0) {
      return
    }
    
    // Validate array lengths match
    if (images.length !== entries.length) {
      console.warn('Gallery data arrays length mismatch')
      return
    }
    
    // Function to pick and display a random image
    function showRandomImage(isInitial = false) {
      const randomIndex = Math.floor(Math.random() * images.length)
      const newImage = images[randomIndex]
      const newKey = entries[randomIndex]?.[0]
      
      if (!newImage || typeof newImage !== 'string') {
        console.warn('Invalid image URL')
        return
      }
      
      const newAlt = newKey && typeof newKey === 'string'
        ? (newKey
            .split('/')
            .pop()
            ?.replace(/\.[^/.]+$/, '')
            ?.replace(/[-_]+/g, ' ') ?? '')
        : ''
      
      // Preload the new image before transition
      const preloadImg = new Image()
      
      preloadImg.onerror = function() {
        console.warn('Failed to load gallery image:', newImage)
      }
      
      preloadImg.onload = function() {
        if (!img.parentNode) return
        
        // For initial load, skip fade transition for immediate display
        if (isInitial) {
          img.src = newImage
          img.alt = newAlt
          img.style.opacity = '.85'
        } else {
          img.style.opacity = '0'
          
          setTimeout(() => {
            if (!img.parentNode) return
            
            img.src = newImage
            img.alt = newAlt
            img.style.opacity = '.85'
          }, 500)
        }
      }
      
      preloadImg.src = newImage
    }
    
    // Show initial random image immediately (no transition)
    showRandomImage(true)
    
    // Then rotate every 10 seconds
    if (images.length > 1) {
      galleryIntervalId = setInterval(() => {
        if (!document.getElementById('gallery-image')) {
          if (galleryIntervalId) {
            clearInterval(galleryIntervalId);
            galleryIntervalId = null;
          }
          return
        }
        
        try {
          showRandomImage()
        } catch (error) {
          console.error('Error rotating gallery image:', error)
          if (galleryIntervalId) {
            clearInterval(galleryIntervalId);
            galleryIntervalId = null;
          }
        }
      }, 10000)
    }
  }
  
  // Run on initial load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initGalleryRotation)
  } else {
    initGalleryRotation()
  }
  
  // Re-run when navigating back (for Astro View Transitions or SPA navigation)
  document.addEventListener('astro:page-load', initGalleryRotation)
  
  // Cleanup on navigation away
  document.addEventListener('astro:before-preparation', () => {
    if (galleryIntervalId) {
      clearInterval(galleryIntervalId);
      galleryIntervalId = null;
    }
  })
</script>