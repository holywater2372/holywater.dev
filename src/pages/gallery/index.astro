---
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import PageHead from '@/components/PageHead.astro'
import Layout from '@/layouts/Layout.astro'

// 최신 Astro에서는 Astro.glob 대신 import.meta.glob 사용
const imported = import.meta.glob(
  '../../content/gallery/*.{jpg,jpeg,png,webp,avif,gif}',
  {
    eager: true,
    query: '?url',
    import: 'default',
  },
) as Record<string, string>;

// 파일명 기준 정렬 후 URL 리스트로 변환
const images = Object.entries(imported)
  .sort((a, b) => a[0].localeCompare(b[0]))
  .map(([, url]) => url)
---

<Layout class="max-w-3xl">
  <PageHead slot="head" title="Gallery" />
  <Breadcrumbs items={[{ label: 'Gallery', icon: 'lucide:images' }]} />
  <section aria-label="Masonry Gallery" class="gallery-wrapper">
    <div class="masonry">
      {
        images.map((src, index) => (
          <div class="masonry-item" data-index={index}>
            <img src={src} alt="" loading="lazy" decoding="async" />
            <div class="overlay">
              <div class="overlay-icon">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M15 3h6v6" />
                  <path d="M10 14 21 3" />
                  <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" />
                </svg>
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </section>

  <!-- Lightbox Modal -->
  <div id="lightbox" class="lightbox">
    <div class="lightbox-backdrop"></div>
    <div class="lightbox-content">
      
      <!-- Download button -->
      <button class="lightbox-download" aria-label="Download image">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
          <polyline points="7 10 12 15 17 10"/>
          <line x1="12" y1="15" x2="12" y2="3"/>
        </svg>
      </button>

      <!-- Close button -->
      <button class="lightbox-close" aria-label="Close lightbox">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
      
      <!-- Navigation buttons -->
      <button class="lightbox-nav lightbox-prev" aria-label="Previous image">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="15,18 9,12 15,6"></polyline>
        </svg>
      </button>
      
      <button class="lightbox-nav lightbox-next" aria-label="Next image">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="9,18 15,12 9,6"></polyline>
        </svg>
      </button>
      
      <div class="lightbox-image-container">
        <img id="lightbox-image" src="" alt="" />
      </div>
      
      <div class="lightbox-counter">
        <span id="current-index">1</span> / <span id="total-images">{images.length}</span>
      </div>
    </div>
  </div>
</Layout>

<style>
  .gallery-wrapper {
    padding: 1rem;
    margin: 0 auto;
    max-width: 1200px;
  }

  .masonry {
    column-gap: 1rem;
  }

  .masonry {
    column-count: 1;
  }

  @media (min-width: 640px) {
    .masonry {
      column-count: 2;
    }
  }

  @media (min-width: 1024px) {
    .masonry {
      column-count: 3;
    }
  }

  @media (min-width: 1280px) {
    .masonry {
      column-count: 4;
    }
  }

  .masonry-item {
    break-inside: avoid;
    margin-bottom: 1rem;
    position: relative;
    cursor: pointer;
    overflow: hidden;
    border-radius: 8px;
    transition: transform 0.3s ease;
  }

  .masonry-item:hover {
    transform: translateY(-4px);
  }

  .masonry-item img {
    display: block;
    width: 100%;
    height: auto;
    border-radius: 8px;
    background: #111;
    transition: transform 0.3s ease;
  }

  .masonry-item:hover img {
    transform: scale(1.05);
  }

  .overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
    border-radius: 8px;
  }

  .masonry-item:hover .overlay {
    opacity: 1;
  }

  .overlay-icon {
    color: white;
    transform: scale(0.8);
    transition: transform 0.3s ease;
  }

  .masonry-item:hover .overlay-icon {
    transform: scale(1);
  }

  /* Lightbox Styles */
  .lightbox {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }

  .lightbox.active {
    opacity: 1;
    visibility: visible;
  }

  .lightbox-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.9);
    cursor: pointer;
    z-index: 1000;
  }

  .lightbox-content {
    position: relative;
    max-width: 90vw;
    max-height: 90vh;
    z-index: 1001;
  }

  .lightbox-close,
  .lightbox-download {
    position: fixed;
    top: 20px;
    background: rgba(0, 0, 0, 0.7);
    border-radius: 50%;
    padding: 12px;
    border: none;
    color: white;
    cursor: pointer;
    z-index: 1002;
    transition: background-color 0.3s ease, transform 0.2s ease;
  }

  .lightbox-close {
    right: 20px;
  }

  .lightbox-download {
    right: 70px; /* sits left of the close button */
  }

  .lightbox-close:hover,
  .lightbox-download:hover {
    background: rgba(0, 0, 0, 0.9);
    transform: scale(1.05);
  }

  .lightbox-nav {
    position: fixed;
    bottom: 20px;
    padding: 15px;
    background: rgba(0, 0, 0, 0.7);
    border-radius: 50%;
    pointer-events: auto;
    border: none;
    color: white;
    cursor: pointer;
    z-index: 1002;
    transition: background-color 0.3s ease, transform 0.2s ease;
  }

  .lightbox-nav:hover {
    background: rgba(0, 0, 0, 0.9);
    transform: scale(1.05);
  }

  .lightbox-prev {
    left: 20px;
  }

  .lightbox-next {
    right: 20px;
  }

  .lightbox-image-container {
    display: flex;
    align-items: center;
    justify-content: center;
    max-width: 90vw;
    max-height: 90vh;
  }

  .lightbox-image-container img {
    max-width: min(90vw, 1200px);
    max-height: min(90vh, 800px);
    width: auto;
    height: auto;
    object-fit: contain;
    border-radius: 8px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
  }

  .lightbox-counter {
    position: absolute;
    bottom: -40px;
    left: 50%;
    transform: translateX(-50%);
    color: white;
    font-size: 14px;
    opacity: 0.8;
  }
</style>

<script>
  const images = Array.from(document.querySelectorAll('.masonry-item img')).map(img => img.src);
  const lightbox = document.getElementById('lightbox');
  const lightboxImage = document.getElementById('lightbox-image');
  const currentIndexEl = document.getElementById('current-index');
  const totalImagesEl = document.getElementById('total-images');
  const closeBtn = document.querySelector('.lightbox-close');
  const prevBtn = document.querySelector('.lightbox-prev');
  const nextBtn = document.querySelector('.lightbox-next');
  const downloadBtn = document.querySelector('.lightbox-download');
  const backdrop = document.querySelector('.lightbox-backdrop');
  
  let currentImageIndex = 0;
  
  totalImagesEl.textContent = images.length.toString();
  
  function openLightbox(index) {
    currentImageIndex = index;
    lightboxImage.src = images[currentImageIndex];
    currentIndexEl.textContent = (currentImageIndex + 1).toString();
    lightbox.classList.add('active');
    document.body.style.overflow = 'hidden';
  }
  
  function closeLightbox() {
    lightbox.classList.remove('active');
    document.body.style.overflow = '';
  }
  
  function prevImage() {
    currentImageIndex = currentImageIndex === 0 ? images.length - 1 : currentImageIndex - 1;
    lightboxImage.src = images[currentImageIndex];
    currentIndexEl.textContent = (currentImageIndex + 1).toString();
  }
  
  function nextImage() {
    currentImageIndex = currentImageIndex === images.length - 1 ? 0 : currentImageIndex + 1;
    lightboxImage.src = images[currentImageIndex];
    currentIndexEl.textContent = (currentImageIndex + 1).toString();
  }

  function downloadImage() {
  const imageUrl = lightboxImage.src;

  // Extract the file extension from the URL (e.g., ".png", ".gif", ".webp")
  const extension = imageUrl.split('.').pop().split(/\#|\?/)[0]; 

  const link = document.createElement('a');
  link.href = imageUrl;
  link.download = `image-${currentImageIndex + 1}.${extension}`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

  document.querySelectorAll('.masonry-item').forEach((item, index) => {
    item.addEventListener('click', () => openLightbox(index));
  });
  
  closeBtn.addEventListener('click', closeLightbox);
  backdrop.addEventListener('click', closeLightbox);
  prevBtn.addEventListener('click', prevImage);
  nextBtn.addEventListener('click', nextImage);
  downloadBtn.addEventListener('click', downloadImage);
  
  lightboxImage.addEventListener('click', (e) => e.stopPropagation());
  backdrop.addEventListener('touchend', closeLightbox);
  
  document.querySelector('.lightbox-image-container')?.addEventListener('click', (e) => e.stopPropagation());
  document.querySelector('.lightbox-image-container')?.addEventListener('touchend', (e) => e.stopPropagation());
  
  document.addEventListener('keydown', (e) => {
    if (!lightbox.classList.contains('active')) return;
    switch (e.key) {
      case 'Escape': closeLightbox(); break;
      case 'ArrowLeft': prevImage(); break;
      case 'ArrowRight': nextImage(); break;
    }
  });
</script>
